// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CategoryColumns holds the columns for the "category" table.
	CategoryColumns = []*schema.Column{
		{Name: "category_id", Type: field.TypeInt, Increment: true, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "category_name", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "category_icon", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "category_memo", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(300)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// CategoryTable holds the schema information for the "category" table.
	CategoryTable = &schema.Table{
		Name:       "category",
		Columns:    CategoryColumns,
		PrimaryKey: []*schema.Column{CategoryColumns[0]},
	}
	// GoalColumns holds the columns for the "goal" table.
	GoalColumns = []*schema.Column{
		{Name: "goal_id", Type: field.TypeInt, Increment: true, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "goal", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(300)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// GoalTable holds the schema information for the "goal" table.
	GoalTable = &schema.Table{
		Name:       "goal",
		Columns:    GoalColumns,
		PrimaryKey: []*schema.Column{GoalColumns[0]},
	}
	// RoleColumns holds the columns for the "role" table.
	RoleColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeInt, Increment: true, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "role_name", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "role_icon", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "role_memo", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(300)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// RoleTable holds the schema information for the "role" table.
	RoleTable = &schema.Table{
		Name:       "role",
		Columns:    RoleColumns,
		PrimaryKey: []*schema.Column{RoleColumns[0]},
	}
	// TeamColumns holds the columns for the "team" table.
	TeamColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeInt, Increment: true, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "team_name", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "team_icon", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "team_memo", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(300)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// TeamTable holds the schema information for the "team" table.
	TeamTable = &schema.Table{
		Name:       "team",
		Columns:    TeamColumns,
		PrimaryKey: []*schema.Column{TeamColumns[0]},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt, Increment: true, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "user_name", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(20)"}},
		{Name: "email", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "user_icon", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(127)"}},
		{Name: "user_memo", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(300)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "goal_id", Type: field.TypeInt, Unique: true, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "role_id", Type: field.TypeInt, Nullable: true, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "team_id", Type: field.TypeInt, Nullable: true, SchemaType: map[string]string{"mysql": "int"}},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_goal_user",
				Columns:    []*schema.Column{UserColumns[8]},
				RefColumns: []*schema.Column{GoalColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_role_user",
				Columns:    []*schema.Column{UserColumns[9]},
				RefColumns: []*schema.Column{RoleColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_team_user",
				Columns:    []*schema.Column{UserColumns[10]},
				RefColumns: []*schema.Column{TeamColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// JUserWithCategoryColumns holds the columns for the "j_user_with_category" table.
	JUserWithCategoryColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt, SchemaType: map[string]string{"mysql": "int"}},
		{Name: "category_id", Type: field.TypeInt, SchemaType: map[string]string{"mysql": "int"}},
	}
	// JUserWithCategoryTable holds the schema information for the "j_user_with_category" table.
	JUserWithCategoryTable = &schema.Table{
		Name:       "j_user_with_category",
		Columns:    JUserWithCategoryColumns,
		PrimaryKey: []*schema.Column{JUserWithCategoryColumns[0], JUserWithCategoryColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "j_user_with_category_user_id",
				Columns:    []*schema.Column{JUserWithCategoryColumns[0]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "j_user_with_category_category_id",
				Columns:    []*schema.Column{JUserWithCategoryColumns[1]},
				RefColumns: []*schema.Column{CategoryColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CategoryTable,
		GoalTable,
		RoleTable,
		TeamTable,
		UserTable,
		JUserWithCategoryTable,
	}
)

func init() {
	CategoryTable.Annotation = &entsql.Annotation{
		Table: "category",
	}
	GoalTable.Annotation = &entsql.Annotation{
		Table: "goal",
	}
	RoleTable.Annotation = &entsql.Annotation{
		Table: "role",
	}
	TeamTable.Annotation = &entsql.Annotation{
		Table: "team",
	}
	UserTable.ForeignKeys[0].RefTable = GoalTable
	UserTable.ForeignKeys[1].RefTable = RoleTable
	UserTable.ForeignKeys[2].RefTable = TeamTable
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	JUserWithCategoryTable.ForeignKeys[0].RefTable = UserTable
	JUserWithCategoryTable.ForeignKeys[1].RefTable = CategoryTable
}
