// Code generated by ent, DO NOT EDIT.

package team

import (
	"sample/migrations/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TeamName applies equality check predicate on the "team_name" field. It's identical to TeamNameEQ.
func TeamName(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamName), v))
	})
}

// TeamIcon applies equality check predicate on the "team_icon" field. It's identical to TeamIconEQ.
func TeamIcon(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamIcon), v))
	})
}

// TeamMemo applies equality check predicate on the "team_memo" field. It's identical to TeamMemoEQ.
func TeamMemo(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamMemo), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// TeamNameEQ applies the EQ predicate on the "team_name" field.
func TeamNameEQ(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamName), v))
	})
}

// TeamNameNEQ applies the NEQ predicate on the "team_name" field.
func TeamNameNEQ(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeamName), v))
	})
}

// TeamNameIn applies the In predicate on the "team_name" field.
func TeamNameIn(vs ...string) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTeamName), v...))
	})
}

// TeamNameNotIn applies the NotIn predicate on the "team_name" field.
func TeamNameNotIn(vs ...string) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTeamName), v...))
	})
}

// TeamNameGT applies the GT predicate on the "team_name" field.
func TeamNameGT(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeamName), v))
	})
}

// TeamNameGTE applies the GTE predicate on the "team_name" field.
func TeamNameGTE(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeamName), v))
	})
}

// TeamNameLT applies the LT predicate on the "team_name" field.
func TeamNameLT(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeamName), v))
	})
}

// TeamNameLTE applies the LTE predicate on the "team_name" field.
func TeamNameLTE(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeamName), v))
	})
}

// TeamNameContains applies the Contains predicate on the "team_name" field.
func TeamNameContains(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeamName), v))
	})
}

// TeamNameHasPrefix applies the HasPrefix predicate on the "team_name" field.
func TeamNameHasPrefix(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeamName), v))
	})
}

// TeamNameHasSuffix applies the HasSuffix predicate on the "team_name" field.
func TeamNameHasSuffix(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeamName), v))
	})
}

// TeamNameEqualFold applies the EqualFold predicate on the "team_name" field.
func TeamNameEqualFold(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeamName), v))
	})
}

// TeamNameContainsFold applies the ContainsFold predicate on the "team_name" field.
func TeamNameContainsFold(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeamName), v))
	})
}

// TeamIconEQ applies the EQ predicate on the "team_icon" field.
func TeamIconEQ(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamIcon), v))
	})
}

// TeamIconNEQ applies the NEQ predicate on the "team_icon" field.
func TeamIconNEQ(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeamIcon), v))
	})
}

// TeamIconIn applies the In predicate on the "team_icon" field.
func TeamIconIn(vs ...string) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTeamIcon), v...))
	})
}

// TeamIconNotIn applies the NotIn predicate on the "team_icon" field.
func TeamIconNotIn(vs ...string) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTeamIcon), v...))
	})
}

// TeamIconGT applies the GT predicate on the "team_icon" field.
func TeamIconGT(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeamIcon), v))
	})
}

// TeamIconGTE applies the GTE predicate on the "team_icon" field.
func TeamIconGTE(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeamIcon), v))
	})
}

// TeamIconLT applies the LT predicate on the "team_icon" field.
func TeamIconLT(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeamIcon), v))
	})
}

// TeamIconLTE applies the LTE predicate on the "team_icon" field.
func TeamIconLTE(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeamIcon), v))
	})
}

// TeamIconContains applies the Contains predicate on the "team_icon" field.
func TeamIconContains(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeamIcon), v))
	})
}

// TeamIconHasPrefix applies the HasPrefix predicate on the "team_icon" field.
func TeamIconHasPrefix(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeamIcon), v))
	})
}

// TeamIconHasSuffix applies the HasSuffix predicate on the "team_icon" field.
func TeamIconHasSuffix(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeamIcon), v))
	})
}

// TeamIconEqualFold applies the EqualFold predicate on the "team_icon" field.
func TeamIconEqualFold(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeamIcon), v))
	})
}

// TeamIconContainsFold applies the ContainsFold predicate on the "team_icon" field.
func TeamIconContainsFold(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeamIcon), v))
	})
}

// TeamMemoEQ applies the EQ predicate on the "team_memo" field.
func TeamMemoEQ(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoNEQ applies the NEQ predicate on the "team_memo" field.
func TeamMemoNEQ(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoIn applies the In predicate on the "team_memo" field.
func TeamMemoIn(vs ...string) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTeamMemo), v...))
	})
}

// TeamMemoNotIn applies the NotIn predicate on the "team_memo" field.
func TeamMemoNotIn(vs ...string) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTeamMemo), v...))
	})
}

// TeamMemoGT applies the GT predicate on the "team_memo" field.
func TeamMemoGT(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoGTE applies the GTE predicate on the "team_memo" field.
func TeamMemoGTE(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoLT applies the LT predicate on the "team_memo" field.
func TeamMemoLT(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoLTE applies the LTE predicate on the "team_memo" field.
func TeamMemoLTE(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoContains applies the Contains predicate on the "team_memo" field.
func TeamMemoContains(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoHasPrefix applies the HasPrefix predicate on the "team_memo" field.
func TeamMemoHasPrefix(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoHasSuffix applies the HasSuffix predicate on the "team_memo" field.
func TeamMemoHasSuffix(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoEqualFold applies the EqualFold predicate on the "team_memo" field.
func TeamMemoEqualFold(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeamMemo), v))
	})
}

// TeamMemoContainsFold applies the ContainsFold predicate on the "team_memo" field.
func TeamMemoContainsFold(v string) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeamMemo), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Team {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		p(s.Not())
	})
}
