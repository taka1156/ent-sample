// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sample/migrations/ent/goal"
	"sample/migrations/ent/predicate"
	"sample/migrations/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoalUpdate is the builder for updating Goal entities.
type GoalUpdate struct {
	config
	hooks    []Hook
	mutation *GoalMutation
}

// Where appends a list predicates to the GoalUpdate builder.
func (gu *GoalUpdate) Where(ps ...predicate.Goal) *GoalUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetGoal sets the "goal" field.
func (gu *GoalUpdate) SetGoal(s string) *GoalUpdate {
	gu.mutation.SetGoal(s)
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GoalUpdate) SetCreatedAt(t time.Time) *GoalUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GoalUpdate) SetUpdatedAt(t time.Time) *GoalUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GoalUpdate) SetDeletedAt(t time.Time) *GoalUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GoalUpdate) SetNillableDeletedAt(t *time.Time) *GoalUpdate {
	if t != nil {
		gu.SetDeletedAt(*t)
	}
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GoalUpdate) ClearDeletedAt() *GoalUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gu *GoalUpdate) SetUserID(id int) *GoalUpdate {
	gu.mutation.SetUserID(id)
	return gu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (gu *GoalUpdate) SetNillableUserID(id *int) *GoalUpdate {
	if id != nil {
		gu = gu.SetUserID(*id)
	}
	return gu
}

// SetUser sets the "user" edge to the User entity.
func (gu *GoalUpdate) SetUser(u *User) *GoalUpdate {
	return gu.SetUserID(u.ID)
}

// Mutation returns the GoalMutation object of the builder.
func (gu *GoalUpdate) Mutation() *GoalMutation {
	return gu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gu *GoalUpdate) ClearUser() *GoalUpdate {
	gu.mutation.ClearUser()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GoalUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GoalUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GoalUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GoalUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GoalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goal.Table,
			Columns: goal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goal.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Goal(); ok {
		_spec.SetField(goal.FieldGoal, field.TypeString, value)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(goal.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(goal.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(goal.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(goal.FieldDeletedAt, field.TypeTime)
	}
	if gu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goal.UserTable,
			Columns: []string{goal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goal.UserTable,
			Columns: []string{goal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoalUpdateOne is the builder for updating a single Goal entity.
type GoalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoalMutation
}

// SetGoal sets the "goal" field.
func (guo *GoalUpdateOne) SetGoal(s string) *GoalUpdateOne {
	guo.mutation.SetGoal(s)
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GoalUpdateOne) SetCreatedAt(t time.Time) *GoalUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GoalUpdateOne) SetUpdatedAt(t time.Time) *GoalUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GoalUpdateOne) SetDeletedAt(t time.Time) *GoalUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GoalUpdateOne) SetNillableDeletedAt(t *time.Time) *GoalUpdateOne {
	if t != nil {
		guo.SetDeletedAt(*t)
	}
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GoalUpdateOne) ClearDeletedAt() *GoalUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (guo *GoalUpdateOne) SetUserID(id int) *GoalUpdateOne {
	guo.mutation.SetUserID(id)
	return guo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (guo *GoalUpdateOne) SetNillableUserID(id *int) *GoalUpdateOne {
	if id != nil {
		guo = guo.SetUserID(*id)
	}
	return guo
}

// SetUser sets the "user" edge to the User entity.
func (guo *GoalUpdateOne) SetUser(u *User) *GoalUpdateOne {
	return guo.SetUserID(u.ID)
}

// Mutation returns the GoalMutation object of the builder.
func (guo *GoalUpdateOne) Mutation() *GoalMutation {
	return guo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (guo *GoalUpdateOne) ClearUser() *GoalUpdateOne {
	guo.mutation.ClearUser()
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GoalUpdateOne) Select(field string, fields ...string) *GoalUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Goal entity.
func (guo *GoalUpdateOne) Save(ctx context.Context) (*Goal, error) {
	var (
		err  error
		node *Goal
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Goal)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GoalUpdateOne) SaveX(ctx context.Context) *Goal {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GoalUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GoalUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GoalUpdateOne) sqlSave(ctx context.Context) (_node *Goal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goal.Table,
			Columns: goal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: goal.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Goal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goal.FieldID)
		for _, f := range fields {
			if !goal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Goal(); ok {
		_spec.SetField(goal.FieldGoal, field.TypeString, value)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(goal.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(goal.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(goal.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(goal.FieldDeletedAt, field.TypeTime)
	}
	if guo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goal.UserTable,
			Columns: []string{goal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goal.UserTable,
			Columns: []string{goal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Goal{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
