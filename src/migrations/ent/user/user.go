// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "user_id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldGoalID holds the string denoting the goal_id field in the database.
	FieldGoalID = "goal_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldUserIcon holds the string denoting the user_icon field in the database.
	FieldUserIcon = "user_icon"
	// FieldUserMemo holds the string denoting the user_memo field in the database.
	FieldUserMemo = "user_memo"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeGoal holds the string denoting the goal edge name in mutations.
	EdgeGoal = "goal"
	// CategoryFieldID holds the string denoting the ID field of the Category.
	CategoryFieldID = "category_id"
	// RoleFieldID holds the string denoting the ID field of the Role.
	RoleFieldID = "role_id"
	// TeamFieldID holds the string denoting the ID field of the Team.
	TeamFieldID = "team_id"
	// GoalFieldID holds the string denoting the ID field of the Goal.
	GoalFieldID = "goal_id"
	// Table holds the table name of the user in the database.
	Table = "user"
	// CategoryTable is the table that holds the category relation/edge. The primary key declared below.
	CategoryTable = "j_user_with_category"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "category"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "user"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "role"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "user"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "team"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_id"
	// GoalTable is the table that holds the goal relation/edge.
	GoalTable = "user"
	// GoalInverseTable is the table name for the Goal entity.
	// It exists in this package in order to avoid circular dependency with the "goal" package.
	GoalInverseTable = "goal"
	// GoalColumn is the table column denoting the goal relation/edge.
	GoalColumn = "goal_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldRoleID,
	FieldTeamID,
	FieldGoalID,
	FieldUserName,
	FieldEmail,
	FieldUserIcon,
	FieldUserMemo,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

var (
	// CategoryPrimaryKey and CategoryColumn2 are the table columns denoting the
	// primary key for the category relation (M2M).
	CategoryPrimaryKey = []string{"user_id", "category_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
